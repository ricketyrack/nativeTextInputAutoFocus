{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/createClass","data":{"isAsync":false}},{"name":"./efa2e8e4.js","data":{"isAsync":false}},{"name":"./09e8fbb9.js","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.a = createNonEnumFormatter;\n  exports.c = createFormatter;\n\n  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/classCallCheck\"));\n\n  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/createClass\"));\n\n  var _efa2e8e = _$$_REQUIRE(_dependencyMap[3], \"./efa2e8e4.js\");\n\n  var _e8fbb = _$$_REQUIRE(_dependencyMap[4], \"./09e8fbb9.js\");\n\n  var DefaultDateTimeFormatter = function () {\n    function DefaultDateTimeFormatter(config) {\n      (0, _classCallCheck2.default)(this, DefaultDateTimeFormatter);\n      this.config = config, this.type = _e8fbb.F.DateTime;\n    }\n\n    (0, _createClass2.default)(DefaultDateTimeFormatter, [{\n      key: \"format\",\n      value: function format(value) {\n        return !value || isNaN(value.getTime()) ? \"\" : (0, _efa2e8e.f)(value, this.config);\n      }\n    }, {\n      key: \"parse\",\n      value: function parse(value) {\n        if (\"\" === value) return {\n          valid: !0,\n          value: void 0\n        };\n        var result = (0, _efa2e8e.p)(value, this.config);\n        return void 0 === result ? {\n          valid: !1\n        } : {\n          valid: !0,\n          value: result\n        };\n      }\n    }, {\n      key: \"getFormatPlaceholder\",\n      value: function getFormatPlaceholder() {\n        return (0, _efa2e8e.F)(this.config);\n      }\n    }, {\n      key: \"withConfig\",\n      value: function withConfig(config) {\n        return new DefaultDateTimeFormatter(config);\n      }\n    }]);\n    return DefaultDateTimeFormatter;\n  }();\n\n  var DefaultEnumFormatter = function () {\n    function DefaultEnumFormatter(universe) {\n      (0, _classCallCheck2.default)(this, DefaultEnumFormatter);\n      this.universe = universe;\n    }\n\n    (0, _createClass2.default)(DefaultEnumFormatter, [{\n      key: \"format\",\n      value: function format(value) {\n        var entry = this.universe.find(function (e) {\n          return e.key === value;\n        });\n        return entry ? entry.caption : value ? value.toString() : \"\";\n      }\n    }, {\n      key: \"parse\",\n      value: function parse(_value) {\n        throw new Error(\"Enumeration values cannot be parsed\");\n      }\n    }]);\n    return DefaultEnumFormatter;\n  }();\n\n  var DefaultNumberFormatter = function () {\n    function DefaultNumberFormatter(config) {\n      (0, _classCallCheck2.default)(this, DefaultNumberFormatter);\n      this.config = config, this.type = _e8fbb.F.Number;\n    }\n\n    (0, _createClass2.default)(DefaultNumberFormatter, [{\n      key: \"format\",\n      value: function format(value) {\n        return value ? (0, _efa2e8e.a)(value, this.config.groupDigits, this.config.decimalPrecision) : \"\";\n      }\n    }, {\n      key: \"parse\",\n      value: function parse(inputValue) {\n        if (\"\" === inputValue) return {\n          valid: !0,\n          value: void 0\n        };\n        var result = (0, _efa2e8e.b)(inputValue, this.config.decimalPrecision);\n        return void 0 === result ? {\n          valid: !1\n        } : {\n          valid: !0,\n          value: result\n        };\n      }\n    }, {\n      key: \"withConfig\",\n      value: function withConfig(config) {\n        return new DefaultNumberFormatter(config);\n      }\n    }]);\n    return DefaultNumberFormatter;\n  }();\n\n  function createFormatter(entity, attribute, config) {\n    var metaObject = mx.meta.getEntity(entity),\n        attributeType = metaObject.getAttributeType(attribute);\n    return void 0 === attributeType ? {\n      format: function format() {\n        return \"\";\n      },\n      parse: function parse() {\n        throw new Error(\"Cannot parse values for unresolved attribute\");\n      }\n    } : \"Enum\" === attributeType ? new DefaultEnumFormatter(metaObject.getEnumMap(attribute)) : createNonEnumFormatter(attributeType, config);\n  }\n\n  function createNonEnumFormatter(attributeType, config) {\n    var _a, _b;\n\n    switch (attributeType) {\n      case \"DateTime\":\n        return new DefaultDateTimeFormatter(null != (_a = config.dateFormat) ? _a : {\n          type: \"date\"\n        });\n\n      case \"Integer\":\n      case \"Long\":\n      case \"Decimal\":\n        return new DefaultNumberFormatter(null != (_b = config.numberFormat) ? _b : {\n          groupDigits: !1\n        });\n\n      default:\n        return {\n          format: function format(value) {\n            return (0, _efa2e8e.E)(value, attributeType);\n          },\n          parse: function parse(inputValue) {\n            var value = (0, _efa2e8e.G)(inputValue, attributeType);\n            return void 0 !== value ? {\n              valid: !0,\n              value: value\n            } : {\n              valid: !1\n            };\n          }\n        };\n    }\n  }\n});","map":[[14,0,1,0],[16,0,1,156],[18,6,1,208,"DefaultDateTimeFormatter"],[18,30],[19,0,1,233],[19,38,1,245,"config"],[19,44,1,233],[19,46,1,252],[20,0,1,252],[21,0,1,253],[21,11,1,258,"config"],[21,17,1,253],[21,20,1,265,"config"],[21,26,1,253],[21,28,1,272],[21,33,1,277,"type"],[21,37,1,272],[21,40,1,282,"FormatterType"],[21,49,1,296,"DateTime"],[21,57,1,253],[22,0,1,305],[26,29,1,312,"value"],[26,34],[26,36,1,318],[27,0,1,319],[27,15,1,325],[27,16,1,326,"value"],[27,21,1,325],[27,25,1,333,"isNaN"],[27,30,1,338],[27,31,1,339,"value"],[27,36,1,344],[27,37,1,345,"getTime"],[27,44,1,339],[27,46,1,338],[27,47,1,325],[27,50,1,356],[27,52,1,325],[27,55,1,359],[27,71,1,370,"value"],[27,76,1,359],[27,78,1,376],[27,83,1,381,"config"],[27,89,1,359],[27,90,1,319],[28,0,1,389],[31,28,1,395,"value"],[31,33],[31,35,1,401],[32,0,1,402],[32,12,1,405],[32,19,1,410,"value"],[32,24,1,402],[32,26,1,416],[32,33,1,422],[33,0,1,423,"valid"],[33,10,1,423,"valid"],[33,15,1,428],[33,17,1,429],[33,18,1,430],[33,19,1,422],[34,0,1,432,"value"],[34,10,1,432,"value"],[34,15,1,437],[34,17,1,438],[34,22,1,443],[35,0,1,422],[35,9,1,416],[36,0,1,446],[36,12,1,452,"result"],[36,18,1,458],[36,21,1,459],[36,37,1,469,"value"],[36,42,1,459],[36,44,1,475],[36,49,1,480,"config"],[36,55,1,459],[36,56,1,446],[37,0,1,488],[37,15,1,495],[37,20,1,500],[37,21,1,495],[37,26,1,504,"result"],[37,32,1,495],[37,35,1,511],[38,0,1,512,"valid"],[38,10,1,512,"valid"],[38,15,1,517],[38,17,1,518],[38,18,1,519],[39,0,1,511],[39,9,1,495],[39,12,1,522],[40,0,1,523,"valid"],[40,10,1,523,"valid"],[40,15,1,528],[40,17,1,529],[40,18,1,530],[40,19,1,522],[41,0,1,532,"value"],[41,10,1,532,"value"],[41,15,1,537],[41,17,1,538,"result"],[42,0,1,522],[42,9,1,488],[43,0,1,546],[46,45,1,568],[47,0,1,569],[47,15,1,576],[47,31,1,601],[47,36,1,606,"config"],[47,42,1,576],[47,43,1,569],[48,0,1,614],[51,33,1,625,"config"],[51,39],[51,41,1,632],[52,0,1,633],[52,15,1,640],[52,19,1,644,"DefaultDateTimeFormatter"],[52,43,1,640],[52,44,1,669,"config"],[52,50,1,640],[52,51,1,633],[53,0,1,677],[58,6,1,684,"DefaultEnumFormatter"],[58,26],[59,0,1,705],[59,34,1,717,"universe"],[59,42,1,705],[59,44,1,726],[60,0,1,726],[61,0,1,727],[61,11,1,732,"universe"],[61,19,1,727],[61,22,1,741,"universe"],[61,30,1,727],[62,0,1,750],[66,29,1,757,"value"],[66,34],[66,36,1,763],[67,0,1,764],[67,12,1,770,"entry"],[67,17,1,775],[67,20,1,776],[67,25,1,781,"universe"],[67,33,1,776],[67,34,1,790,"find"],[67,38,1,776],[67,39,1,795],[67,49,1,795,"e"],[67,50,1,796],[68,0,1,796],[68,17,1,798,"e"],[68,18,1,799],[68,19,1,800,"key"],[68,22,1,798],[68,27,1,806,"value"],[68,32,1,796],[69,0,1,796],[69,9,1,776],[69,10,1,764],[70,0,1,813],[70,15,1,820,"entry"],[70,20,1,825],[70,23,1,826,"entry"],[70,28,1,831],[70,29,1,832,"caption"],[70,36,1,825],[70,39,1,840,"value"],[70,44,1,845],[70,47,1,846,"value"],[70,52,1,851],[70,53,1,852,"toString"],[70,61,1,846],[70,63,1,845],[70,66,1,863],[70,68,1,813],[71,0,1,866],[74,28,1,872,"_value"],[74,34],[74,36,1,879],[75,0,1,880],[75,14,1,886],[75,18,1,890,"Error"],[75,23,1,886],[75,24,1,896],[75,61,1,886],[75,62,1,880],[76,0,1,935],[81,6,1,942,"DefaultNumberFormatter"],[81,28],[82,0,1,965],[82,36,1,977,"config"],[82,42,1,965],[82,44,1,984],[83,0,1,984],[84,0,1,985],[84,11,1,990,"config"],[84,17,1,985],[84,20,1,997,"config"],[84,26,1,985],[84,28,1,1004],[84,33,1,1009,"type"],[84,37,1,1004],[84,40,1,1014,"FormatterType"],[84,49,1,1028,"Number"],[84,55,1,985],[85,0,1,1035],[89,29,1,1042,"value"],[89,34],[89,36,1,1048],[90,0,1,1049],[90,15,1,1056,"value"],[90,20,1,1061],[90,23,1,1062],[90,39,1,1075,"value"],[90,44,1,1062],[90,46,1,1081],[90,51,1,1086,"config"],[90,57,1,1081],[90,58,1,1093,"groupDigits"],[90,69,1,1062],[90,71,1,1105],[90,76,1,1110,"config"],[90,82,1,1105],[90,83,1,1117,"decimalPrecision"],[90,99,1,1062],[90,100,1,1061],[90,103,1,1135],[90,105,1,1049],[91,0,1,1138],[94,28,1,1144,"inputValue"],[94,38],[94,40,1,1155],[95,0,1,1156],[95,12,1,1159],[95,19,1,1164,"inputValue"],[95,29,1,1156],[95,31,1,1175],[95,38,1,1181],[96,0,1,1182,"valid"],[96,10,1,1182,"valid"],[96,15,1,1187],[96,17,1,1188],[96,18,1,1189],[96,19,1,1181],[97,0,1,1191,"value"],[97,10,1,1191,"value"],[97,15,1,1196],[97,17,1,1197],[97,22,1,1202],[98,0,1,1181],[98,9,1,1175],[99,0,1,1205],[99,12,1,1211,"result"],[99,18,1,1217],[99,21,1,1218],[99,37,1,1230,"inputValue"],[99,47,1,1218],[99,49,1,1241],[99,54,1,1246,"config"],[99,60,1,1241],[99,61,1,1253,"decimalPrecision"],[99,77,1,1218],[99,78,1,1205],[100,0,1,1271],[100,15,1,1278],[100,20,1,1283],[100,21,1,1278],[100,26,1,1287,"result"],[100,32,1,1278],[100,35,1,1294],[101,0,1,1295,"valid"],[101,10,1,1295,"valid"],[101,15,1,1300],[101,17,1,1301],[101,18,1,1302],[102,0,1,1294],[102,9,1,1278],[102,12,1,1305],[103,0,1,1306,"valid"],[103,10,1,1306,"valid"],[103,15,1,1311],[103,17,1,1312],[103,18,1,1313],[103,19,1,1305],[104,0,1,1315,"value"],[104,10,1,1315,"value"],[104,15,1,1320],[104,17,1,1321,"result"],[105,0,1,1305],[105,9,1,1271],[106,0,1,1329],[109,33,1,1340,"config"],[109,39],[109,41,1,1347],[110,0,1,1348],[110,15,1,1355],[110,19,1,1359,"DefaultNumberFormatter"],[110,41,1,1355],[110,42,1,1382,"config"],[110,48,1,1355],[110,49,1,1348],[111,0,1,1390],[116,0,1,1391],[116,11,1,1400,"createFormatter"],[116,26,1,1391],[116,27,1,1416,"entity"],[116,33,1,1391],[116,35,1,1423,"attribute"],[116,44,1,1391],[116,46,1,1433,"config"],[116,52,1,1391],[116,54,1,1440],[117,0,1,1441],[117,8,1,1447,"metaObject"],[117,18,1,1457],[117,21,1,1458,"mx"],[117,23,1,1460],[117,24,1,1461,"meta"],[117,28,1,1458],[117,29,1,1466,"getEntity"],[117,38,1,1458],[117,39,1,1476,"entity"],[117,45,1,1458],[117,46,1,1441],[118,0,1,1441],[118,8,1,1484,"attributeType"],[118,21,1,1497],[118,24,1,1498,"metaObject"],[118,34,1,1508],[118,35,1,1509,"getAttributeType"],[118,51,1,1498],[118,52,1,1526,"attribute"],[118,61,1,1498],[118,62,1,1441],[119,0,1,1537],[119,11,1,1544],[119,16,1,1549],[119,17,1,1544],[119,22,1,1553,"attributeType"],[119,35,1,1544],[119,38,1,1567],[120,0,1,1568,"format"],[120,6,1,1568,"format"],[120,12,1,1574],[120,14,1,1575],[121,0,1,1575],[121,15,1,1579],[121,17,1,1575],[122,0,1,1575],[122,7,1,1567],[123,0,1,1582,"parse"],[123,6,1,1582,"parse"],[123,11,1,1587],[123,13,1,1588],[123,30,1,1592],[124,0,1,1593],[124,14,1,1599],[124,18,1,1603,"Error"],[124,23,1,1599],[124,24,1,1609],[124,70,1,1599],[124,71,1,1593],[125,0,1,1657],[126,0,1,1567],[126,5,1,1544],[126,8,1,1659],[126,19,1,1668,"attributeType"],[126,32,1,1659],[126,35,1,1682],[126,39,1,1686,"DefaultEnumFormatter"],[126,59,1,1682],[126,60,1,1707,"metaObject"],[126,70,1,1717],[126,71,1,1718,"getEnumMap"],[126,81,1,1707],[126,82,1,1729,"attribute"],[126,91,1,1707],[126,92,1,1682],[126,93,1,1659],[126,96,1,1741,"createNonEnumFormatter"],[126,118,1,1763],[126,119,1,1764,"attributeType"],[126,132,1,1763],[126,134,1,1778,"config"],[126,140,1,1763],[126,141,1,1537],[127,0,1,1786],[129,0,1,1786],[129,11,1,1795,"createNonEnumFormatter"],[129,33,1,1786],[129,34,1,1818,"attributeType"],[129,47,1,1786],[129,49,1,1832,"config"],[129,55,1,1786],[129,57,1,1839],[130,0,1,1840],[130,8,1,1844,"_a"],[130,10,1,1840],[130,12,1,1847,"_b"],[130,14,1,1840],[132,0,1,1850],[132,12,1,1857,"attributeType"],[132,25,1,1850],[133,0,1,1872],[133,11,1,1876],[133,21,1,1872],[134,0,1,1887],[134,15,1,1894],[134,19,1,1898,"DefaultDateTimeFormatter"],[134,43,1,1894],[134,44,1,1923],[134,53,1,1930,"_a"],[134,55,1,1932],[134,58,1,1933,"config"],[134,64,1,1939],[134,65,1,1940,"dateFormat"],[134,75,1,1923],[134,79,1,1952,"_a"],[134,81,1,1923],[134,84,1,1955],[135,0,1,1956,"type"],[135,10,1,1956,"type"],[135,14,1,1960],[135,16,1,1961],[136,0,1,1955],[136,9,1,1894],[136,10,1,1887],[138,0,1,1970],[138,11,1,1974],[138,20,1,1970],[139,0,1,1984],[139,11,1,1988],[139,17,1,1984],[140,0,1,1995],[140,11,1,1999],[140,20,1,1995],[141,0,1,2009],[141,15,1,2016],[141,19,1,2020,"DefaultNumberFormatter"],[141,41,1,2016],[141,42,1,2043],[141,51,1,2050,"_b"],[141,53,1,2052],[141,56,1,2053,"config"],[141,62,1,2059],[141,63,1,2060,"numberFormat"],[141,75,1,2043],[141,79,1,2074,"_b"],[141,81,1,2043],[141,84,1,2077],[142,0,1,2078,"groupDigits"],[142,10,1,2078,"groupDigits"],[142,21,1,2089],[142,23,1,2090],[142,24,1,2091],[143,0,1,2077],[143,9,1,2016],[143,10,1,2009],[145,0,1,2095],[146,0,1,2103],[146,15,1,2109],[147,0,1,2110,"format"],[147,10,1,2110,"format"],[147,16,1,2116],[147,18,1,2117],[147,34,1,2117,"value"],[147,39,1,2122],[148,0,1,2122],[148,19,1,2124],[148,35,1,2136,"value"],[148,40,1,2124],[148,42,1,2142,"attributeType"],[148,55,1,2124],[148,56,1,2122],[149,0,1,2122],[149,11,1,2109],[150,0,1,2157,"parse"],[150,10,1,2157,"parse"],[150,15,1,2162],[150,17,1,2163],[150,32,1,2163,"inputValue"],[150,42,1,2173],[150,44,1,2175],[151,0,1,2176],[151,16,1,2182,"value"],[151,21,1,2187],[151,24,1,2188],[151,40,1,2199,"inputValue"],[151,50,1,2188],[151,52,1,2210,"attributeType"],[151,65,1,2188],[151,66,1,2176],[152,0,1,2225],[152,19,1,2232],[152,24,1,2237],[152,25,1,2232],[152,30,1,2241,"value"],[152,35,1,2232],[152,38,1,2247],[153,0,1,2248,"valid"],[153,14,1,2248,"valid"],[153,19,1,2253],[153,21,1,2254],[153,22,1,2255],[153,23,1,2247],[154,0,1,2257,"value"],[154,14,1,2257,"value"],[154,19,1,2262],[154,21,1,2263,"value"],[155,0,1,2247],[155,13,1,2232],[155,16,1,2270],[156,0,1,2271,"valid"],[156,14,1,2271,"valid"],[156,19,1,2276],[156,21,1,2277],[156,22,1,2278],[157,0,1,2270],[157,13,1,2225],[158,0,1,2281],[159,0,1,2109],[159,9,1,2103],[160,0,1,1850],[161,0,1,2284]]},"type":"js/module"}]}